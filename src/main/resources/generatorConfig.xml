<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
  PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
  "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
	<!-- 引入配置文件 在我的项目中只能这么写原因不明-->
	<!--<properties resource="com/daishaowen/test/generatorConfig.properties"/>-->
	<properties resource="generatorConfig.properties"/>
	<!--<properties resource="file:///${basedir}/src/main/resources/generatorConfig.properties"/>-->

	<!--数据库驱动包路径 ，不加会报驱动找不到的错误-->
	<classPathEntry location="${drive.class.path}"/>
	<!--如果是MyBatis3simple mapper会缺少方法-->
	<!--<context id="Mysql" targetRuntime="MyBatis3Simple" defaultModelType="flat">-->
	<context id="Mysql" targetRuntime="MyBatis3" defaultModelType="flat">
		<!-- 防止部分IDE，在进行代码生成器过程中，自定义注释部分 中文乱码 -->
		<property name="javaFileEncoding" value="UTF-8"/>
		<!-- 自动识别数据库关键字，默认false -->
		<property name="autoDelimitKeywords" value="true" />
		<!-- 由于beginningDelimiter和endingDelimiter的默认值为双引号(")，在Mysql中不能这么写，所以还要将这两个默认值改为**反单引号(`)**，配置如下：  -->
		<property name="beginningDelimiter" value="`"/>
		<property name="endingDelimiter" value="`"/>

		<!--使用lombok.Data生成getter, setter-->
		<plugin type="com.daishaowen.test.mybatisPlugin.GetterSetterPlugin"/>

		<!-- 配置pojo的序列化 -->
		<plugin type="org.mybatis.generator.plugins.SerializablePlugin" />

		<commentGenerator>
			<!-- 是否去除自动生成的注释 true：是 ： false:否 -->
			<property name="suppressAllComments" value="true" />

		</commentGenerator>



		<!--数据库连接的信息：驱动类、连接地址、用户名、密码 -->
		<jdbcConnection driverClass="${jdbc.driver}"
						connectionURL="${jdbc.url}"
						userId="${jdbc.username}"
						password="${jdbc.password}">
		</jdbcConnection>

		<!-- 默认false，把JDBC DECIMAL 和 NUMERIC 类型解析为 Integer，为 true时把JDBC DECIMAL 和 
			NUMERIC 类型解析为java.math.BigDecimal -->
		<javaTypeResolver>
			<property name="forceBigDecimals" value="false" />
		</javaTypeResolver>

		<!-- targetProject:生成PO类的位置 -->
		<javaModelGenerator targetPackage="${model.package}"
			targetProject="${target.project}">
			<!-- enableSubPackages:是否让schema作为包的后缀 -->
			<property name="enableSubPackages" value="false" />
			<!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
			<property name="trimStrings" value="true" />
		</javaModelGenerator>
        <!-- targetProject:mapper映射文件生成的位置 -->
		<sqlMapGenerator targetPackage="${dao.package}"
			targetProject="${target.project}">
			<!-- enableSubPackages:是否让schema作为包的后缀 -->
			<property name="enableSubPackages" value="false" />
		</sqlMapGenerator>
		<!-- targetPackage：mapper接口生成的位置 -->
		<javaClientGenerator type="XMLMAPPER"
			targetPackage="${xml.com.daishaowen.test.mapper.package}"
			targetProject="${target.project}">
			<!-- enableSubPackages:是否让schema作为包的后缀 -->
			<property name="enableSubPackages" value="false" />
			<!--继承某一个类-->
			<property name="rootClass" value="com.resto.conf.mybatis.util.MyMapper"/>
		</javaClientGenerator>

		<!-- 指定数据库表 -->
		 <table schema="" tableName="wechat_config" domainObjectName="WechatConfig" enableCountByExample="false" enableUpdateByExample="false" enableDeleteByExample="false" enableSelectByExample="false" selectByExampleQueryId="false">
			 <!--mysql 配置,在insert方法中生成id返回-->
			<!-- <generatedKey column="id" sqlStatement="Mysql" identity="true"/>-->
			 <!--oracle 配置-->
			 <!--<generatedKey column="id" sqlStatement="select SEQ_{1}.nextval from dual" identity="false" type="pre"/>-->
		<!-- 参考 javaModelGenerator 的 constructorBased属性-->

		<!--<property name="constructorBased" value="false"/>

		&lt;!&ndash; 默认为false，如果设置为true，在生成的SQL中，table名字不会加上catalog或schema； &ndash;&gt;
		<property name="ignoreQualifiersAtRuntime" value="false"/>

		&lt;!&ndash; 参考 javaModelGenerator 的 immutable 属性 &ndash;&gt;
		<property name="immutable" value="false"/>

		&lt;!&ndash; 指定是否只生成domain类，如果设置为true，只生成domain类，如果还配置了sqlMapGenerator，那么在mapper XML文件中，只生成resultMap元素 &ndash;&gt;
		<property name="modelOnly" value="false"/>

		&lt;!&ndash; 参考 javaModelGenerator 的 rootClass 属性
        <property name="rootClass" value=""/>
         &ndash;&gt;

		&lt;!&ndash; 参考javaClientGenerator 的  rootInterface 属性
        <property name="rootInterface" value=""/>
        &ndash;&gt;

		&lt;!&ndash; 如果设置了runtimeCatalog，那么在生成的SQL中，使用该指定的catalog，而不是table元素上的catalog
        <property name="runtimeCatalog" value=""/>
        &ndash;&gt;

		&lt;!&ndash; 如果设置了runtimeSchema，那么在生成的SQL中，使用该指定的schema，而不是table元素上的schema
        <property name="runtimeSchema" value=""/>
        &ndash;&gt;

		&lt;!&ndash; 如果设置了runtimeTableName，那么在生成的SQL中，使用该指定的tablename，而不是table元素上的tablename
        <property name="runtimeTableName" value=""/>
        &ndash;&gt;

		&lt;!&ndash; 注意，该属性只针对MyBatis3Simple有用；
            如果选择的runtime是MyBatis3Simple，那么会生成一个SelectAll方法，如果指定了selectAllOrderByClause，那么会在该SQL中添加指定的这个order条件；
         &ndash;&gt;
		<property name="selectAllOrderByClause" value="age desc,username asc"/>

		&lt;!&ndash; 如果设置为true，生成的model类会直接使用column本身的名字，而不会再使用驼峰命名方法，比如BORN_DATE，生成的属性名字就是BORN_DATE,而不会是bornDate &ndash;&gt;
		<property name="useActualColumnNames" value="false"/>


		&lt;!&ndash; generatedKey用于生成生成主键的方法，
            如果设置了该元素，MBG会在生成的<insert>元素中生成一条正确的<selectKey>元素，该元素可选
            column:主键的列名；
            sqlStatement：要生成的selectKey语句，有以下可选项：
                Cloudscape:相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                DB2       :相当于selectKey的SQL为： VALUES IDENTITY_VAL_LOCAL()
                DB2_MF    :相当于selectKey的SQL为：SELECT IDENTITY_VAL_LOCAL() FROM SYSIBM.SYSDUMMY1
                Derby     :相当于selectKey的SQL为：VALUES IDENTITY_VAL_LOCAL()
                HSQLDB    :相当于selectKey的SQL为：CALL IDENTITY()
                Informix  :相当于selectKey的SQL为：select dbinfo('sqlca.sqlerrd1') from systables where tabid=1
                MySql     :相当于selectKey的SQL为：SELECT LAST_INSERT_ID()
                SqlServer :相当于selectKey的SQL为：SELECT SCOPE_IDENTITY()
                SYBASE    :相当于selectKey的SQL为：SELECT @@IDENTITY
                JDBC      :相当于在生成的insert元素上添加useGeneratedKeys="true"和keyProperty属性
        <generatedKey column="" sqlStatement=""/>
         &ndash;&gt;

		&lt;!&ndash;
            该元素会在根据表中列名计算对象属性名之前先重命名列名，非常适合用于表中的列都有公用的前缀字符串的时候，
            比如列名为：CUST_ID,CUST_NAME,CUST_EMAIL,CUST_ADDRESS等；
            那么就可以设置searchString为"^CUST_"，并使用空白替换，那么生成的Customer对象中的属性名称就不是
            custId,custName等，而是先被替换为ID,NAME,EMAIL,然后变成属性：id，name，email；

            注意，MBG是使用java.util.regex.Matcher.replaceAll来替换searchString和replaceString的，
            如果使用了columnOverride元素，该属性无效；

        <columnRenamingRule searchString="" replaceString=""/>
         &ndash;&gt;


		&lt;!&ndash; 用来修改表中某个列的属性，MBG会使用修改后的列来生成domain的属性；
           column:要重新设置的列名；
           注意，一个table元素中可以有多个columnOverride元素哈~
         &ndash;&gt;
		<columnOverride column="username">
			&lt;!&ndash; 使用property属性来指定列要生成的属性名称 &ndash;&gt;
			<property name="property" value="userName"/>

			&lt;!&ndash; javaType用于指定生成的domain的属性类型，使用类型的全限定名
            <property name="javaType" value=""/>
             &ndash;&gt;

			&lt;!&ndash; jdbcType用于指定该列的JDBC类型
            <property name="jdbcType" value=""/>
             &ndash;&gt;

			&lt;!&ndash; typeHandler 用于指定该列使用到的TypeHandler，如果要指定，配置类型处理器的全限定名
                注意，mybatis中，不会生成到mybatis-rabbitmqConfig.xml中的typeHandler
                只会生成类似：where id = #{id,jdbcType=BIGINT,typeHandler=com._520it.mybatisPlugin.MyTypeHandler}的参数描述
            <property name="jdbcType" value=""/>
            &ndash;&gt;

			&lt;!&ndash; 参考table元素的delimitAllColumns配置，默认为false
            <property name="delimitedColumnName" value=""/>
             &ndash;&gt;
		</columnOverride>-->

		<!-- ignoreColumn设置一个MGB忽略的列，如果设置了改列，那么在生成的domain中，生成的SQL中，都不会有该列出现
           column:指定要忽略的列的名字；
           delimitedColumnName：参考table元素的delimitAllColumns配置，默认为false

           注意，一个table元素中可以有多个ignoreColumn元素
        <ignoreColumn column="deptId" delimitedColumnName=""/>-->

		 </table>


      <!-- 有些表的字段需要指定java类型-->
        <!--<table schema="" tableName="">
           <columnOverride column="" javaType="" />
       </table> -->
	</context>
</generatorConfiguration>